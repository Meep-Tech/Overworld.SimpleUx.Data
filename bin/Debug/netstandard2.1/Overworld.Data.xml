<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Overworld.Data</name>
    </assembly>
    <members>
        <member name="T:Overworld.Data.Animation">
            <summary>
            A sprite animation.
            </summary>
        </member>
        <member name="T:Overworld.Data.Animation.Type">
            <summary>
            Types of entity animation.
            These can be built by files
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.AllowInitializationsAfterLoaderFinalization">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.Name">
            <summary>
            The animation's unique name
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.Version">
            <summary>
            The version of this animation.
            If this is different then the name of the compiled *.anim file then it will be recompiles.
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.Namespace">
            <summary>
            The animation's namespace
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.Clip">
            <summary>
            The unity animation clip that is played
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.Tags">
            <summary>
            The tags that apply to this sprite animation
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.Dimensions">
            <summary>
            The dimensions of the sprite animation in px
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.IsBuildFromAnAssembly">
            <summary>
            If this animation type was built by an assembly/class rather than though the auto-loader
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.ResourceKey">
            <summary>
            The key for this resource
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.PackageName">
            <summary>
            The package name that this came from.
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.DefaultPackageName">
            <summary>
            The package name that this came from.
            </summary>
        </member>
        <member name="M:Overworld.Data.Animation.Type.#ctor(Meep.Tech.Data.Archetype{Overworld.Data.Animation,Overworld.Data.Animation.Type}.Identity)">
            <summary>
            XBAM Base Constructors
            </summary>
        </member>
        <member name="M:Overworld.Data.Animation.Type.#ctor(System.String,Newtonsoft.Json.Linq.JObject,UnityEngine.AnimationClip,System.Collections.Generic.IEnumerable{Overworld.Data.Animation.Tag})">
            <summary>
            Import constructor
            </summary>
        </member>
        <member name="T:Overworld.Data.Animation.Tag">
            <summary>
            Tags used to find any aimations
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.Icon">
            <summary>
            Used for the entity's icon.
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.North">
            <summary>
            Indicates North Facing Sprite Animation
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.South">
            <summary>
            Indicates South Facing Sprite Animation
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.East">
            <summary>
            Indicates Eastward Facing Sprite Animation
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.West">
            <summary>
            Indicates Westward Facing Sprite Animation
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.Animated">
            <summary>
            Represents a sprite that is animated
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.Still">
            <summary>
            Represents a single framed sprite or A non-moving one
            </summary>
        </member>
        <member name="T:Overworld.Data.Animation.Tags">
            <summary>
            A collection of tags that can apply to an animation
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.CustomTags">
            <summary>
            Custom Entity-Setable tags for this animation. 
            This allows you to customize the tags of an animation on an entity.
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.CustomTagWeights">
            <summary>
            Custom Entity-Setable weights for each tag applied to this animation.
            This allows you to customize the weight of different tags in animations for different entities.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity">
            <summary>
            An in game thing that can move around.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Animation">
            <summary>
            A sprite animation.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Animation.Type">
            <summary>
            Types of entity animation.
            These can be built by files
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Animation.Type.Layer">
            <summary>
            The layer this animation acts on.
            Defults to 0 (BaseBody)
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Animation.Type.ShouldScaleToFitEntityByDefault">
            <summary>
            The default "scale to fit entity" setting of animations of this type
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Animation.Type.#ctor(Overworld.Data.Entity.Animation.Type.Identity)">
            <summary>
            XBAM Base Constructors
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Animation.Type.#ctor(System.String,Newtonsoft.Json.Linq.JObject,UnityEngine.AnimationClip,System.Collections.Generic.IEnumerable{Overworld.Data.Entity.Animation.Tag})">
            <summary>
            Import constructor
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Animation.Type.ConfigureModel(Meep.Tech.Data.IBuilder{Overworld.Data.Animation},Overworld.Data.Animation)">
            <summary>
            Build a model from this animation type
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Animation.Type.Identity">
            <summary>
            Animation type id
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Animation.Tag">
            <summary>
            Tags used to find entity specific animations
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Animation.Tag.JsonConverter">
            <summary>
            Used to convert tags to strings and back by default
            </summary>
        </member>
        <member name="F:Overworld.Data.Entity.Animation.Tag.Move">
            <summary>
            Represents a sprite action used to move a number of tiles from your current position.
            For animation that stay in the same place but have motion, use the "Animated" tag.
            </summary>
        </member>
        <member name="F:Overworld.Data.Entity.Animation.Tag.Walk">
            <summary>
            Represents walking
            </summary>
        </member>
        <member name="F:Overworld.Data.Entity.Animation.Tag.Run">
            <summary>
            Represents running
            </summary>
        </member>
        <member name="F:Overworld.Data.Entity.Animation.Tag.Jump">
            <summary>
            Represents jumping
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Animation.Layer">
            <summary>
            The layer of the entity an animation applies to
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Animation.ScaleToFitEntity">
            <summary>
            If this animation should scale to fit the entity it's applied to
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Type">
            <summary>
            A type of entity
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Type.ResourceKey">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Type.PackageName">
            <summary>
            The package name that this came from.
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Type.DefaultPackageName">
            <summary>
            The package name that this came from.
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Type.#ctor(System.String,Overworld.Data.Entity.Type.Identity)">
            <summary>
            Used to make a new type of entity
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Type.Identity">
            <summary>
            Ids for entity types
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Id">
            <summary>
            Unique entity id
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Name">
            <summary>
            The display name of an entity
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Animations">
            <summary>
            Availible sprite animations by tag
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.#ctor(Meep.Tech.Data.IBuilder{Overworld.Data.Entity})">
            <summary>
            X Bam Builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Overworld.Data.Entity.#ctor(System.String,System.String)">
            <summary>
            Make a new entity
            </summary>
        </member>
        <member name="T:Overworld.Data.Character">
            <summary>
            A player controlled entity
            </summary>
        </member>
        <member name="M:Overworld.Data.Character.Type.#ctor(System.String,Overworld.Data.Entity.Type.Identity)">
            <summary>
            For X Bam
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Overworld.Data.Character.UniqueName">
            <summary>
            The unique, human readable name of a character. Like their username
            </summary>
        </member>
        <member name="M:Overworld.Data.Character.#ctor(Meep.Tech.Data.IBuilder{Overworld.Data.Entity})">
            <summary>
            X Bam Builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Overworld.Data.Character.#ctor(System.String,System.String)">
            <summary>
            Make a new character
            </summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.DoEveryFrameHook">
            <summary>
            A Hook to execute something every frame
            </summary>
        </member>
        <member name="P:Overworld.Data.Entites.Components.DoEveryFrameHook.SimpleUxMenuTitle">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.EntityHook`1">
            <summary>
            A type of component that uses a hook to execute some code from the perspective of an entity.
            </summary>
        </member>
        <member name="P:Overworld.Data.Entites.Components.EntityHook`1.SimpleUxMenuTitle">
            <summary>
            The title used for this component in it's simpleux menu
            </summary>
        </member>
        <member name="P:Overworld.Data.Entites.Components.EntityHook`1.Executeables">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.EntityInteractionHook">
            <summary>
            A component to place an execution hook on an entity interaction.
            </summary>
        </member>
        <member name="P:Overworld.Data.Entites.Components.EntityInteractionHook.SimpleUxMenuTitle">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.EntityKeyPressHook">
            <summary>
            This type of hook is exexuted on a key press.
            </summary>
        </member>
        <member name="P:Overworld.Data.Entites.Components.EntityKeyPressHook.SimpleUxMenuTitle">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.EntityOnCharacterJoinHook">
            <summary>
            A hook that's executed for the joining charachter when they join the world.
            </summary>
        </member>
        <member name="P:Overworld.Data.Entites.Components.EntityOnCharacterJoinHook.SimpleUxMenuTitle">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.EntityOnStartHook">
            <summary>
            A hook executred on the world being started by the server.
            </summary>
        </member>
        <member name="P:Overworld.Data.Entites.Components.EntityOnStartHook.SimpleUxMenuTitle">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.IEntityHookComponent">
            <summary>
            A component that can be added to an entity that executes code on a trigger.
            </summary>
        </member>
        <member name="T:Overworld.Data.Tile">
            <summary>
            Represents a tile placed on a tileboard.
            </summary>
        </member>
        <member name="T:Overworld.Data.Tile.Type">
            <summary>
            Archetypes for tiles.
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.AllowInitializationsAfterLoaderFinalization">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.DefaultPackageName">
            <summary>
            The default package name for archetyps of this type
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.ResourceKey">
            <summary>
            The unique resource key of this type
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.BackgroundImageHashKey">
            <summary>
            The hash key of the image
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.PackageName">
            <summary>
            The package name that this came from.
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.DefaultBackground">
            <summary>
            The background tile this tile is using
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.DefaultHeight">
            <summary>
            The tile height
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.Description">
            <summary>
            The tile height
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.UseDefaultBackgroundAsInWorldTileImage">
            <summary>
            If the default background should be used as the tile image in world.
            If false, the DefaultBackground image is just for use in the editor ui.
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.LinkArchetypeToTileDataOnSet">
            <summary>
            If this tile archetype should link itself to a tile when used to make that tile in the world
            If you don't want this archetype set as the tile's 'type' then set this to false.
            This is used for Background Archetypes for tiles.
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile.Type._ignoreDuringModReSerialization">
            <summary>
            This is used to ignore the type during re-serialization, because another type may already handle importing it via he same resource key.
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile.Type.#ctor(System.String,System.String,System.String,UnityEngine.Tilemaps.Tile,System.Nullable{UnityEngine.Hash128},System.Nullable{System.Single})">
            <summary>
            Used to make new tiles via import.
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Archetype">
            <summary>
            The archetype originally used to make this tile.
            A tile can be modified around it, and then reset to it as well.
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Background">
            <summary>
            The background tile this tile is using
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Height">
            <summary>
            The tile height
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile._backgroundOverride">
            <summary>
            can be used to reference a type who's background should be used instead.
            This is to avoid duplicating tiles.
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile.ResetAndUpdateForCurrentArchetype">
            <summary>
            Resets this tile to it's current archetype's settings, and updates any changed settings.
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile.OverrideBackgroundTo(Overworld.Data.Tile.Type)">
            <summary>
            Override the background to another type's background image
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile._applyArchetype(Overworld.Data.Tile.Type)">
            <summary>
            Initialize this for a new archetype
            </summary>
            <param name="archetype"></param>
        </member>
        <member name="T:Overworld.Data.Tile.Porter">
            <summary>
            Used to import and export tile types.
            </summary>
        </member>
        <member name="T:Overworld.Data.Tile.Porter.BackgroundImageImportMode">
            <summary>
            The config specified import mode
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Porter.DefaultPackageName">
            <summary>
            The package name that this came from.
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Porter.ValidConfigOptionKeys">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Overworld.Data.Tile.Porter.ValidImportOptionKeys">
            <summary><inheritdoc/></summary>
        </member>
        <member name="F:Overworld.Data.Tile.Porter.ValidImageExtensions">
            <summary>
            Valid image extensions
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile.Porter.PixelsPerTileOption">
            <summary>
            option for pixels per tile.
            Takes an int.
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile.Porter.ProvidedSheetDimensionsOption">
            <summary>
            option for dimensions in tiles instead of pixels during import.
            Takes an int.
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile.Porter.InPlaceTileCallbackOption">
            <summary>
            Takes an Action[Vector2Int, UnityEngine.Tilemaps.Tile] with the params:
              tile location in it's tilemap
              the generated unity tile
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile.Porter.PixelsPerTileConfigKey">
            <summary>
            Key for the tile diameter in pixels value in the config
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile.Porter.TileHeightConfigKey">
            <summary>
            Key for the tile height
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile.Porter.SheetSizeInTilesConfigKey">
            <summary>
            Key used to pass in how large the tile sheet is in tiles
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile.Porter.ImportModeConfigKey">
            <summary>
            The config key for the mode used to import the image.
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile.Porter.#ctor(Overworld.Data.User)">
            <summary>
            Make a new tile importer. This is made at startup.
            TODO: these should be singletons probably.
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile.Porter._importArchetypesFromExternalFile(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Imports the archetyps, assuming the one file is an image or config.json
            TODO: implement just config.json upload
            TODO: this should return two archetypes, the background and special.
            
            </summary>
            <param name="options">
            - PixelsPerTileOption: the pixel diameter of imported tiles.
            - (optional) InPlaceTileCallbackOption: Action[Vector2Int&#44; Tile.Type] executed on the imported tile, given it's location in it's image.
            </param>
            <returns></returns>
        </member>
        <member name="M:Overworld.Data.Tile.Porter._importArchetypesFromExternalFiles(System.String[],System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Imports the archetyps, assuming at least one of the tiles is an image and one may be an config.json
            </summary>
            <param name="options">
            - PixelsPerTileOption: the pixel diameter of imported tiles.
            - ProvidedSheetDimensionsOption (optional): if the image is a sprite sheet, you can provide a custom number of tiles to pull from it
            - InPlaceTileCallbackOption (optional): Action[Vector2Int&#44; Tile.Type] executed on the imported tile, given it's location in it's image.
            </param>
            <returns></returns>
        </member>
        <member name="M:Overworld.Data.Tile.Porter._serializeArchetypeToModFiles(Overworld.Data.Tile.Type,System.String)">
            <summary>
            Saves each tile as it's own image with a config for import
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile.Porter._importUnityTilesFrom(System.String,System.Nullable{System.Int32},System.Boolean,System.Nullable{UnityEngine.Vector2})">
            <summary>
            Import a collection of tiles from an image location
            </summary>
        </member>
        <member name="T:Overworld.Data.TileExtensions">
            <summary>
            Extensions for Unity Tiles
            </summary>
        </member>
        <member name="M:Overworld.Data.TileExtensions.GetTileHash(UnityEngine.Tilemaps.Tile)">
            <summary>
            Gets a tile's hash code from it's image
            </summary>
        </member>
        <member name="T:Overworld.Data.DateAndTime">
            <summary>
            A date and time in the game world.
            </summary>
        </member>
        <member name="F:Overworld.Data.DateAndTime.Date">
            <summary>
            The numerical date in the game world.
            </summary>
        </member>
        <member name="F:Overworld.Data.DateAndTime.Time">
            <summary>
            The numeric time in the game world.
            </summary>
        </member>
        <member name="M:Overworld.Data.DateAndTime.#ctor(System.Int32,System.Single)">
            <summary>
            Make a date with an optional time
            </summary>
        </member>
        <member name="P:Overworld.Data.DateAndTime.Local">
            <summary>
            The local date and time of the current world
            </summary>
        </member>
        <member name="M:Overworld.Data.CardinalDirectionExtensions.TurnClockwise(Overworld.Data.World.CardinalDirection)">
            <summary>
            Get the direction if you turn clockwise 90 degrees from this one.
            </summary>
        </member>
        <member name="M:Overworld.Data.CardinalDirectionExtensions.TurnCounterClockwise(Overworld.Data.World.CardinalDirection)">
            <summary>
            Get the direction if you turn counter-clockwise 90 degrees from this one.
            </summary>
        </member>
        <member name="M:Overworld.Data.CardinalDirectionExtensions.TurnClockwise(Overworld.Data.World.CardinalCorner)">
            <summary>
            Get the direction if you turn clockwise 90 degrees from this one.
            </summary>
        </member>
        <member name="M:Overworld.Data.CardinalDirectionExtensions.TurnCounterClockwise(Overworld.Data.World.CardinalCorner)">
            <summary>
            Get the direction if you turn counter-clockwise 90 degrees from this one.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entities.Components.BasicPhysicalStats">
            <summary>
            Some basic physical stats for all characters
            </summary>
        </member>
        <member name="P:Overworld.Data.Entities.Components.BasicPhysicalStats.Height">
            <summary>
            Height, in "Tiles" (1.75 is average)
            </summary>
        </member>
        <member name="P:Overworld.Data.Entities.Components.BasicPhysicalStats.Width">
            <summary>
            Width, in "Tiles" (0.75 is average)
            </summary>
        </member>
        <member name="P:Overworld.Data.Entities.Components.BasicPhysicalStats.Weight">
            <summary>
            Weight in "Units", used for physics and some other things.
            175u is average.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Overworld.Data.Entities.Components.BasicPhysicalStats.OnWidthChangeFuncs" -->
        <!-- Badly formed XML comment ignored for member "F:Overworld.Data.Entities.Components.BasicPhysicalStats.OnWeightChangeFuncs" -->
        <!-- Badly formed XML comment ignored for member "F:Overworld.Data.Entities.Components.BasicPhysicalStats.OnHeightChangeFuncs" -->
        <member name="T:Overworld.Data.IToggleableComponent">
            <summary>
            A component that can be added to an entity.
            </summary>
        </member>
        <member name="T:Overworld.Data.IToggleableComponent.IType">
            <summary>
            There can only be one component per type attached to an entity.
            </summary>
        </member>
        <member name="P:Overworld.Data.IToggleableComponent.IsEnabled">
            <summary>
            If this component is enabled.
            Also used to enable and disable.
            </summary>
        </member>
        <member name="M:Overworld.Data.IToggleableComponent.ToggleEnabled(System.Nullable{System.Boolean})">
            <summary>
            Toggle if this component is enabled or disabled.
            </summary>
        </member>
        <member name="M:Overworld.Data.IToggleableComponent.OnDisabled">
            <summary>
            Callback for on-deacivated/disabled
            </summary>
        </member>
        <member name="M:Overworld.Data.IToggleableComponent.OnEnabled">
            <summary>
            Callback for on-acivated/enabled
            </summary>
        </member>
        <member name="T:Overworld.Data.IToggleableComponent`1">
            <summary>
            A component that can be added to an entity.
            </summary>
            <typeparam name="TComponentBase">Only one component of each base type can be added to a model.</typeparam>
        </member>
        <member name="M:Overworld.Data.EntityComponentExtensionMethods.ToggleEnabled``1(``0,System.Nullable{System.Boolean})">
            <summary>
            Toggle if this component is enabled or disabled.
            </summary>
        </member>
        <member name="T:Overworld.Data.Executeable">
            <summary>
            An item that can be added to a component signifying logic that can be executed.
            Currently just OWS scripts.
            </summary>
        </member>
        <member name="T:Overworld.Data.Executeable.Type">
            <summary>
            A type of executable, setable in the editor.
            </summary>
        </member>
        <member name="M:Overworld.Data.Executeable.Type.#ctor(Meep.Tech.Data.Archetype.Identity)">
            <summary>
            For making new types of executables.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Overworld.Data.Executeable.Execute">
            <summary>
            Execute this with the internal program and context.
            </summary>
        </member>
        <member name="T:Overworld.Data.TileBoard">
            <summary>
            A collection of tiles for a board.
            </summary>
        </member>
        <member name="F:Overworld.Data.TileBoard.PitDepth">
            <summary>
            The height/depth for tiles that are just bottomless pits/nothing/etc.
            </summary>
        </member>
        <member name="P:Overworld.Data.TileBoard.Dimensions">
            <summary>
            The dimensions of the board, in tiles.
            </summary>
        </member>
        <member name="P:Overworld.Data.TileBoard.Bounds">
            <summary>
            The tile board boundaries
            </summary>
        </member>
        <member name="P:Overworld.Data.TileBoard.RequiredTileTypes">
            <summary>
            Required tile archetypes needed to load this board.
            </summary>
        </member>
        <member name="F:Overworld.Data.TileBoard._tiles">
            <summary>
            The raw tile data for this board
            </summary>
        </member>
        <member name="P:Overworld.Data.TileBoard.Item(UnityEngine.Vector2Int)">
            <summary>
            Get a tile via world location from above
            </summary>
        </member>
        <member name="P:Overworld.Data.TileBoard.Item(System.Int32,System.Int32)">
            <summary>
            Get a tile via world location from above
            </summary>
        </member>
        <member name="M:Overworld.Data.TileBoard.#ctor(UnityEngine.Vector2Int)">
            <summary>
            Create a new tileboard of the given size.
            </summary>
        </member>
        <member name="P:Overworld.Data.User.UniqueName">
            <summary>
            The unique, human readable name of a User. The username
            </summary>
        </member>
        <member name="T:Overworld.Data.World">
            <summary>
            A Game world, consisting of multuiple tile boards
            </summary>
        </member>
        <member name="T:Overworld.Data.World.CardinalDirection">
            <summary>
            The 4 cardinal directions.
            </summary>
        </member>
        <member name="T:Overworld.Data.World.CardinalCorner">
            <summary>
            The 4 cardinal corner directions.
            </summary>
        </member>
        <member name="F:Overworld.Data.World.Origin">
            <summary>
            The world origin of tileboards in (XZ) space
            </summary>
        </member>
        <member name="F:Overworld.Data.World.CardinalOffsets">
            <summary>
            The 4 cardinal directions offsets
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Options">
            <summary>
            The owner-set options for this world.
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Entities">
            <summary>
            All of the entities in the current world by id
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Boards">
            <summary>
            The editor specific data.
            This should be lazy loaded when the editor is opened for a world.
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Bounds">
            <summary>
            The world boundaries
            </summary>
        </member>
        <member name="T:Overworld.Data.World.Settings">
            <summary>
            creator/owner specified settings for a world
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Settings.TileWidthInPixels">
            <summary>
            The witdth of a tile in pixesls in this world
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Settings.AllowDragging">
            <summary>
            Allow players to drag the screen in this world.
            Always enabled in editor mode.
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Settings.Dimensions">
            <summary>
            The dimensions of the world, in tiles.
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Settings.ZoomLimit">
            <summary>
            The zoom in and out limits for the in-game camera.
            </summary>
        </member>
        <member name="T:Overworld.Data.IO.ArchetypePorter`1">
            <summary>
            used to im/export archetypes of a specific type from mods
            </summary>
        </member>
        <member name="F:Overworld.Data.IO.ArchetypePorter`1.NameConfigKey">
            <summary>
            Key for the name value in the config
            </summary>
        </member>
        <member name="F:Overworld.Data.IO.ArchetypePorter`1.PackageNameConfigKey">
            <summary>
            Key for the package name value in the config
            </summary>
        </member>
        <member name="P:Overworld.Data.IO.ArchetypePorter`1.DefaultPackageName">
            <summary>
            The default package name for archetyps of this type
            </summary>
        </member>
        <member name="P:Overworld.Data.IO.ArchetypePorter`1.ValidImportOptionKeys">
            <summary>
            Keys that work for options for imports.
            </summary>
        </member>
        <member name="P:Overworld.Data.IO.ArchetypePorter`1.ValidConfigOptionKeys">
            <summary>
            Valid Keys for the config.json
            </summary>
        </member>
        <member name="P:Overworld.Data.IO.ArchetypePorter`1.CurrentUser">
            <summary>
            The user in control of the current game, and imports.
            </summary>
        </member>
        <member name="F:Overworld.Data.IO.ArchetypePorter`1._cachedResources">
            <summary>
            The cached archetypes of this kind, by resource id
            </summary>
        </member>
        <member name="F:Overworld.Data.IO.ArchetypePorter`1._cachedResourcesByPackage">
            <summary>
            The cached archetypes of this kind, by package name then resource id.
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.#ctor(Overworld.Data.User)">
            <summary>
            Make a new type of archetype porter with inheritance
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1._importArchetypesFromExternalFile(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Used to import arhetypes of this kind from one uploaded file
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1._importArchetypesFromExternalFiles(System.String[],System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Used to import arhetypes of this kind from multiple uploaded files
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1._serializeArchetypeToModFiles(`0,System.String)">
            <summary>
            Serialize this archetype to a set of files in the mod folder.
            </summary>
            <param name="archetype">The archetype to serialize into a file or files</param>
            <param name="packageDirectoryPath">The root path to save files to for this archetype</param>
            <returns>The newly serialized file's locations</returns>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.SerializeArchetypeToModFolder(`0)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.TryToGetGetCachedArchetype(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="resourceKey"></param>
            <returns></returns>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.GetCachedArchetype(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="resourceKey"></param>
            <returns></returns>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.TryToFindArchetypeAndLoadFromModFolder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.LoadArchetypeFromModFolder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.ImportAndBuildNewArchetypeFromFile(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.ImportAndBuildNewArchetypeFromFolder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.ImportAndBuildNewArchetypeFromFiles(System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.GetFolderForArchetype(Overworld.Data.IPortableArchetype)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.GetFolderForModItem(System.String,System.String@,System.String@)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.GetFolderForModItem(System.String,System.String)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.TryToMoveRenamedArchetypeFolder(System.String,Overworld.Data.IPortableArchetype)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.ForceMoveRenamedArchetypeFolder(System.String,Overworld.Data.IPortableArchetype)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.GetResourceKeyFromFileLocationAndSettings(System.String,System.String@,System.String@)">
            <summary>
            Used to make a new key for a new resouce made by the current user
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.CorrectBaseKeysAndNamesForConfigValues(System.String,System.String@,System.String@,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Correct package name, resource key, etc according to the config values:
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.TryToGetConfig(System.Collections.Generic.IEnumerable{System.String},System.String@)">
            <summary>
            Try to get the _config.json from the set of provided files.
            </summary>
        </member>
        <member name="T:Overworld.Data.IArchetypePorter">
            <summary>
            used to im/export archetypes from mods
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.ModFolderName">
            <summary>
            The base mod folder name
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.ImportFolderName">
            <summary>
            The imports folder name
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.FinishedImportsFolderName">
            <summary>
            The finished imports folder name.
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.NameOverrideSetting">
            <summary>
            Option parameter to override the object name
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.PagkageNameOverrideSetting">
            <summary>
            Option parameter to override the object name
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.MoveFinishedFilesToFinishedImportsFolderSetting">
            <summary>
            Option parameter to Move the imported files to the finished imports folder.
            Accepts a bool
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.ConfigFileName">
            <summary>
            The name of the config json file.
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.GetCachedArchetype(System.String)">
            <summary>
            Get an already loaded archetype
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.TryToGetGetCachedArchetype(System.String)">
            <summary>
            Try to get an already loaded archetype
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.LoadArchetypeFromModFolder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            get an archetype from the mods folder files
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.TryToFindArchetypeAndLoadFromModFolder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Try to get an existing archetype from the compiled mod folder files.
            This doesn't throw if it finds no files, but may throw if the found files are invalid, or the archetype already exists.
            Returns null on failure to find.
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.ImportAndBuildNewArchetypeFromFile(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Import a new archetype or archetypes from the external file location.
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.ImportAndBuildNewArchetypeFromFiles(System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Import a new archetype or archetypes from the external collection of files.
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.ImportAndBuildNewArchetypeFromFolder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Import a new archetype from the external folder, full of files.
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.GetFolderForModItem(System.String,System.String@,System.String@)">
            <summary>
            Get the sub folder under the mod folder on the device used for this specfic archetype,
            also splits up the key into it's parts
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.GetFolderForModItem(System.String,System.String)">
            <summary>
            Get the sub folder unther the mod folder on the device used for this specfic archetype
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.GetFolderForArchetype(Overworld.Data.IPortableArchetype)">
            <summary>
            Get the sub folder under the mod folder on the device used for this specfic archetype
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.SerializeArchetypeToModFolder(Meep.Tech.Data.Archetype)">
            <summary>
            Serialize this archetype to a set of files in the mod folder.
            </summary>
            <param name="archetype">The archetype to serialize into a file or files</param>
            <returns>The newly serialized file's locations</returns>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.ForceMoveRenamedArchetypeFolder(System.String,Overworld.Data.IPortableArchetype)">
            <summary>
            Move an archetype from it's old name to a new folder with it's new name (within the same package)
            WARNING This overwrites any existing archetypes with the same name. Use try if you don't want to do this.
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.TryToMoveRenamedArchetypeFolder(System.String,Overworld.Data.IPortableArchetype)">
            <summary>
            Move an archetype from it's old name to a new folder with it's new name (within the same package)
            This returns false if the file exists already, meaning there's already an archetype with the given key.
            </summary>
        </member>
        <member name="M:Overworld.Utility.Extensions.ToDisplayCase(System.String)">
            <summary>
            Make a string from "CamelCase" to "Display Case"
            </summary>
        </member>
        <member name="T:BasicHeightMapTile">
            <summary>
            Used to make height map tiles.
            </summary>
        </member>
        <member name="P:BasicHeightMapTile.Types">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:BasicHeightMapTile.TypesByHeight">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:BasicHeightMapTile.UseDefaultBackgroundAsInWorldTileImage">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:BasicHeightMapTile.LinkArchetypeToTileDataOnSet">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:BasicHeightMapTile.#ctor(System.Single,UnityEngine.Tilemaps.Tile)">
            <summary>
            Make a base height tile for a new height value.
            This will throw if you try to create type for a height that already has a type.
            </summary>
        </member>
        <member name="T:TagedCollection`2">
            <summary>
            A collection of Values indexed by multiple non-unique tags
            </summary>
            <typeparam name="TTag">Assumed to have a unique hash code</typeparam>
            <typeparam name="TValue">The stored values</typeparam>
        </member>
        <member name="P:TagedCollection`2.Values">
            <summary>
            All distinct values
            </summary>
        </member>
        <member name="P:TagedCollection`2.Tags">
            <summary>
            All distinct tags
            </summary>
        </member>
        <member name="M:TagedCollection`2.Add(`1,`0[])">
            <summary>
            Add a new value with as many tags as you want
            </summary>
        </member>
        <member name="M:TagedCollection`2.Add(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            Add a new value with multiple tags
            </summary>
        </member>
        <member name="M:TagedCollection`2.Remove(`1)">
            <summary>
            Remove a value
            </summary>
        </member>
        <member name="M:TagedCollection`2.RemoveValuesFor(`0)">
            <summary>
            Remove all values for the given tag
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindWeightedMatches(System.Int32,`0[])">
            <summary>
            Find the best matches, taking into account tag order
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindWeightedMatches(`0[])">
            <summary>
            Find the best matches, taking into account tag order with the default weight multiplier
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindWeightedMatches(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Find the best matches, taking into account tag order with the default weight multiplier
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindWeightedMatches(System.ValueTuple{`0,System.Int32}[])">
            <summary>
            Find matches given tags with specified weights
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindWeightedMatches(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Int32}})">
            <summary>
            Find matches given tags with specified weights
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindBestMatches(`0[])">
            <summary>
            Find the values that match the most tags in order
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindBestMatches(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the values that match the most tags in order
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectMatches(`0[])">
            <summary>
            Find the values that match any of the tags, unordered
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectMatches(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the values that match any of the tags, unordered
            </summary>
        </member>
        <member name="M:TagedCollection`2.FirstWithTagsOrDefault(`0[])">
            <summary>
            Find the first value with the tags, or a default one with the best match
            </summary>
        </member>
        <member name="M:TagedCollection`2.FirstWithTagsOrDefault(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the first value with the tags, or a default one with the best match
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectWeightedMatches(System.Int32,`0[])">
            <summary>
            Select the best matches, taking into account tag order
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectWeightedMatches(`0[])">
            <summary>
            Select the best matches, taking into account tag order with the default weight multiplier
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectWeightedMatches(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Select the best matches, taking into account tag order with the default weight multiplier.
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectWeightedMatches(System.ValueTuple{`0,System.Int32}[])">
            <summary>
            Select matches given tags with specified weights
            The higher the weight, the more wanted the tag
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectWeightedMatches(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Int32}})">
            <summary>
            Select matches given tags with specified weights
            The higher the weight, the more wanted the tag
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectBestMatches(`0[])">
            <summary>
            Select the values that match the most tags in order
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectBestMatches(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Select the values that match the most tags in order
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByWeight(System.Int32,`0[])">
            <summary>
            Find the best matches, taking into account tag order
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByWeight(`0[])">
            <summary>
            Find the best matches, taking into account tag order with the default weight multiplier
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByWeight(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the best matches, taking into account tag order with the default weight multiplier
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByWeight(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Find the best matches, taking into account tag order with the default weight multiplier
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByWeight(System.ValueTuple{`0,System.Int32}[])">
            <summary>
            Find matches given tags with specified weights
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByWeight(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Int32}})">
            <summary>
            Find matches given tags with specified weights
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByBestMatch(`0[])">
            <summary>
            Find the values that match the most tags
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByBestMatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the values that match the most tags
            </summary>
        </member>
    </members>
</doc>
